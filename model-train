import random
import numpy as np
import pandas as pd
import tensorflow as tf
from tf_utils import random_mini_batches, predict
import matplotlib.pyplot as plt
import json
from tensorflow.python.framework import ops

"""读取数据"""
df = pd.read_csv('lyl_train2.csv')  # 读入数据，生成list
m, n = df.shape  # m行数，n列数
dataMat = np.array(df[['averAccSpeed', 'varAccSpeed', 'ampAccSpeed', 'averAngularSpeed','varAngularSpeed','ampAngularSpeed', 'ampAngleX', 'ampAngleY', 'ampAngleZ', 'covarAccAngular'
]].values[:, :])  # 读入数据，生成矩阵
labelMat = np.array(df[['pattern']].values[:, :]).transpose()-1  # 提取标注
data_aver = np.sum(dataMat, axis=0, dtype=np.float)/m  # 每一列的平均值
data_range = np.max(dataMat, axis=0)-np.min(dataMat, axis=0)  # 每一列最大值最小值的差
X_data = ((dataMat-data_aver)/data_range).transpose()  # 归一化后的数据
Y_data = np.eye(7)[labelMat.reshape(-1)].T
# print(type(X_data))
# print(labelMat.shape)
# print(Y_train_orig)
"""随机取70%作为训练数据"""
X_train_data = []
Y_train_data = []
y0 = labelMat == 0
y1 = labelMat == 1
y2 = labelMat == 2
y3 = labelMat == 3
y4 = labelMat == 4
y5 = labelMat == 5
y6 = labelMat == 6
z0 = labelMat[y0].size*7//10  # 含有0的函数
z1 = labelMat[y1].size*7//10
z2 = labelMat[y2].size*7//10
z3 = labelMat[y3].size*7//10
z4 = labelMat[y4].size*7//10
z5 = labelMat[y5].size*7//10
z6 = labelMat[y6].size*7//10

X0 = random.sample(range(labelMat[y0].size), z0)
shuffled_X0 = X_data[:, X0]
shuffled_Y0 = Y_data[:, X0]
X1 = random.sample(range(labelMat[y0].size, labelMat[y0].size+labelMat[y1].size), z1)
shuffled_X1 = X_data[:, X1]
shuffled_Y1 = Y_data[:, X1]
X2 = random.sample(range(labelMat[y0].size+labelMat[y1].size, labelMat[y0].size+labelMat[y1].size+labelMat[y2].size), z2)
shuffled_X2 = X_data[:, X2]
shuffled_Y2 = Y_data[:, X2]
X3 = random.sample(range(labelMat[y0].size+labelMat[y1].size+labelMat[y2].size, labelMat[y0].size+labelMat[y1].size+labelMat[y2].size+labelMat[y3].size), z3)
shuffled_X3 = X_data[:, X3]
shuffled_Y3 = Y_data[:, X3]
X4 = random.sample(range(labelMat[y0].size+labelMat[y1].size+labelMat[y2].size+labelMat[y3].size,labelMat[y0].size+ labelMat[y1].size+labelMat[y2].size+labelMat[y3].size+labelMat[y4].size), z4)
shuffled_X4 = X_data[:, X4]
shuffled_Y4 = Y_data[:, X4]
X5 = random.sample(range(labelMat[y0].size+labelMat[y1].size+labelMat[y2].size+labelMat[y3].size+labelMat[y4].size, labelMat[y0].size+labelMat[y1].size+labelMat[y2].size+labelMat[y3].size+labelMat[y4].size+labelMat[y5].size),z5)
shuffled_X5 = X_data[:, X5]
shuffled_Y5 = Y_data[:, X5]
X6 = random.sample(range(labelMat[y0].size+labelMat[y1].size+labelMat[y2].size+labelMat[y3].size+labelMat[y4].size+labelMat[y5].size, m), z6)
shuffled_X6 = X_data[:, X6]
shuffled_Y6 = Y_data[:, X6]

X_train_data = np.concatenate((shuffled_X0, shuffled_X1, shuffled_X2, shuffled_X3, shuffled_X4, shuffled_X5, shuffled_X6), axis=1)  # 训练数据
Y_train_data = np.concatenate((shuffled_Y0, shuffled_Y1, shuffled_Y2, shuffled_Y3, shuffled_Y4, shuffled_Y5, shuffled_Y6), axis=1)  # 训练标签

X_remove = np.concatenate((X0, X1, X2, X3, X4, X5, X6))
X_test_data = np.delete(X_data, X_remove, axis=1)

Y_remove = np.concatenate((X0, X1, X2, X3, X4, X5, X6))  # 测试数据
Y_test_data = np.delete(Y_data, Y_remove, axis=1)        # 测试标签


def create_placeholders(n_x, n_y):
    X = tf.placeholder(tf.float32, shape=[n_x, None])
    Y = tf.placeholder(tf.float32, shape=[n_y, None])
    return X, Y


def initialize_parameters():
    tf.set_random_seed(1)  # so that your "random" numbers match ours

    ### START CODE HERE ### (approx. 6 lines of code)
    W1 = tf.get_variable("W1", [13, 10], initializer=tf.contrib.layers.xavier_initializer(seed=1))
    b1 = tf.get_variable("b1", [13, 1], initializer=tf.zeros_initializer())
    W2 = tf.get_variable("W2", [12, 13], initializer=tf.contrib.layers.xavier_initializer(seed=1))
    b2 = tf.get_variable("b2", [12, 1], initializer=tf.zeros_initializer())
    W3 = tf.get_variable("W3", [7, 12], initializer=tf.contrib.layers.xavier_initializer(seed=1))
    b3 = tf.get_variable("b3", [7, 1], initializer=tf.zeros_initializer())
    ### END CODE HERE ###

    parameters = {"W1": W1,
                  "b1": b1,
                  "W2": W2,
                  "b2": b2,
                  "W3": W3,
                  "b3": b3}

    return parameters


def forward_propagation(X, parameters):
    W1 = parameters['W1']
    b1 = parameters['b1']
    W2 = parameters['W2']
    b2 = parameters['b2']
    W3 = parameters['W3']
    b3 = parameters['b3']

    ### START CODE HERE ### (approx. 5 lines)              # Numpy Equivalents:
    Z1 = tf.add(tf.matmul(W1, X), b1)  # Z1 = np.dot(W1, X) + b1
    A1 = tf.nn.relu(Z1)  # A1 = relu(Z1)
    Z2 = tf.add(tf.matmul(W2, A1), b2)  # Z2 = np.dot(W2, a1) + b2
    A2 = tf.nn.relu(Z2)  # A2 = relu(Z2)
    Z3 = tf.add(tf.matmul(W3, A2), b3)  # Z3 = np.dot(W3,Z2) + b3
    ### END CODE HERE ###

    return Z3


# regularization
def regularization(parameters):
    W1 = parameters['W1']
    W2 = parameters['W2']
    W3 = parameters['W3']
    tf.add_to_collection(tf.GraphKeys.WEIGHTS, W1)
    tf.add_to_collection(tf.GraphKeys.WEIGHTS, W2)
    tf.add_to_collection(tf.GraphKeys.WEIGHTS, W3)
    regularizer = tf.contrib.layers.l2_regularizer(scale=4.5)
    reg_term = tf.contrib.layers.apply_regularization(regularizer)

    return reg_term


def compute_cost(Z3, Y,parameters):
    logits = tf.transpose(Z3)
    labels = tf.transpose(Y)

    ### START CODE HERE ### (1 line of code)
    cost = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(logits=logits + regularization(parameters), labels=labels))
    ### END CODE HERE ###

    return cost




"""训练tensorflow模型"""
def model(X_train, Y_train, X_test, Y_test, learning_rate=0.0001,
          num_epochs=1000, minibatch_size=32, print_cost=True):
    """
    Implements a three-layer tensorflow neural network: LINEAR->RELU->LINEAR->RELU->LINEAR->SOFTMAX.

    Arguments:
    X_train -- training set, of shape (input size = 12288, number of training examples = 1080)
    Y_train -- test set, of shape (output size = 6, number of training examples = 1080)
    X_test -- training set, of shape (input size = 12288, number of training examples = 120)
    Y_test -- test set, of shape (output size = 6, number of test examples = 120)
    learning_rate -- learning rate of the optimization
    num_epochs -- number of epochs of the optimization loop
    minibatch_size -- size of a minibatch
    print_cost -- True to print the cost every 100 epochs

    Returns:
    parameters -- parameters learnt by the model. They can then be used to predict.
    """

    ops.reset_default_graph()  # to be able to rerun the model without overwriting tf variables
    tf.set_random_seed(1)  # to keep consistent results
    seed = 3  # to keep consistent results
    (n_x, m) = X_train.shape  # (n_x: input size, m : number of examples in the train set)
    n_y = Y_train.shape[0]  # n_y : output size
    costs = []  # To keep track of the cost

    # Create Placeholders of shape (n_x, n_y)
    ### START CODE HERE ### (1 line)
    X, Y = create_placeholders(n_x, n_y)
    ### END CODE HERE ###

    # Initialize parameters
    ### START CODE HERE ### (1 line)
    parameters = initialize_parameters()
    ### END CODE HERE ###

    # Forward propagation: Build the forward propagation in the tensorflow graph
    ### START CODE HERE ### (1 line)
    Z3 = forward_propagation(X, parameters)
    ### END CODE HERE ###

    # Cost function: Add cost function to tensorflow graph
    ### START CODE HERE ### (1 line)
    cost = compute_cost(Z3, Y, parameters)
    ### END CODE HERE ###

    # Backpropagation: Define the tensorflow optimizer. Use an AdamOptimizer.
    ### START CODE HERE ### (1 line)
    optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(cost)
    ### END CODE HERE ###

    # Initialize all the variables
    init = tf.global_variables_initializer()
    saver = tf.train.Saver()  # 声明tf.train.Saver类用于保存模型
    # Start the session to compute the tensorflow graph
    with tf.Session() as sess:

        # Run the initialization
        sess.run(init)
        saver_path = saver.save(sess, "save/model.ckpt")  # 将模型保存到save/model.ckpt文件
        # Do the training loop

        for epoch in range(num_epochs):

            epoch_cost = 0.  # Defines a cost related to an epoch
            num_minibatches = int(m / minibatch_size)  # number of minibatches of size minibatch_size in the train set
            seed = seed + 1
            minibatches = random_mini_batches(X_train, Y_train, minibatch_size, seed)

            for minibatch in minibatches:
                # Select a minibatch
                (minibatch_X, minibatch_Y) = minibatch

                # IMPORTANT: The line that runs the graph on a minibatch.
                # Run the session to execute the "optimizer" and the "cost", the feedict should contain a minibatch for (X,Y).
                ### START CODE HERE ### (1 line)
                _, minibatch_cost = sess.run([optimizer, cost], feed_dict={X: minibatch_X, Y: minibatch_Y})
                ### END CODE HERE ###

                epoch_cost += minibatch_cost / num_minibatches

            # Print the cost every epoch
            if print_cost == True and epoch % 100 == 0:
                print("Cost after epoch %i: %f" % (epoch, epoch_cost))
            if print_cost == True and epoch % 5 == 0:
                costs.append(epoch_cost)

        # plot the cost
        plt.plot(np.squeeze(costs))
        plt.ylabel('cost')
        plt.xlabel('iterations (per tens)')
        plt.title("Learning rate =" + str(learning_rate))
        plt.show()

        # lets save the parameters in a variable

        parameters = sess.run(parameters)
        with open('save' + '.json', 'a') as outfile:
            json.dump(parameters, outfile, ensure_ascii=False)
            outfile.write('\n')
        print(type(parameters))
        #np.savetxt('model.npy', parameters)
        print("Parameters have been trained!")


        # Calculate the correct predictions
        correct_prediction = tf.equal(tf.argmax(Z3), tf.argmax(Y))

        # Calculate accuracy on the test set
        accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))

        print("Train Accuracy:", accuracy.eval({X: X_train, Y: Y_train}))
        print("Test Accuracy:", accuracy.eval({X: X_test, Y: Y_test}))

        return parameters

parameters = model(X_train_data, Y_train_data, X_test_data, Y_test_data)
